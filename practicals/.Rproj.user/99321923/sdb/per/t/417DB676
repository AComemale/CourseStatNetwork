{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Tutorial: Descriptive Analysis for Network Graphs\"\nauthor: \"MSc in Statistics for Smart Data -- Introduction to graph analysis and modeling\"\ndate: \"Julien Chiquet, October the 19, 2017\"\nfontsize: 11pt\nlang: en\ngeometry: left=1.45in,top=1.35in,right=1.45in,bottom=1.35in\nclassoption: a4paper\nlinkcolor: red\nurlcolor: blue\ncitecolor: green\noutput:\n  pdf_document:\n    number_sections: true\n    citation_package: natbib\n    includes:\n      in_header: ../preamble.sty\n\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n# Preliminaries {-}\n\n#### Goals  {-}\n\n1. Basic network manipulations with `igraph`, vizualization, descriptive statistics\n2. Graph partitioning: hierarchical clustering and spectral clustering algorithms\n3. Analysis of the network of French political blogs\n\n#### Instructions  {-}\n\nEach student _must_ send an `R markdown` report generated via `R studio` to <julien.chiquet@inra.fr> at the end of the tutorial. This report should answers the questions by commentaries and codes generating appropriate graphical outputs. [A cheat sheet of the  markdown syntax can be found here.](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n\n**Required packages.** Check that the following packages are correctly avaialble on your plateform:\n```{r, message=FALSE}\nlibrary(igraph)\nlibrary(sand)\nlibrary(Matrix)\nlibrary(devtools)\nlibrary(aricode) ## devtools::install_github(\"jchiquet/aricode\")\n```\n\nYou also need `Rstudio`, \\LaTeX and packages for markdown: \n\n```{r, message=FALSE}\nlibrary(knitr)\nlibrary(rmarkdown)\n```\n\n# Introduction to **igraph**\n\n## Tutorials \n\nHave a glance at these two tutorials\n\n- [an **igraph** tutorial](https://rstudio-pubs-static.s3.amazonaws.com/74248_3bd99f966ed94a91b36d39d8f21e3dc3.html) for graphs manipulation.\n-  [network analysis with **igraph**](http://kateto.net/networks-r-igraph) that gives an overview of the standard features of **igraph** to perform basic statistical analysis on network graphs.\n\n## Exercice \n\nPlay with the small `data(karate)` network to discover **igraph**. Refer to the above tutorial for help. \n\n- vizualization: add color/change size to vertices and edges; use different layouts\n- statistics: plot degree distribution, find the most connected node, find interesting motifs like cliques or triplets, compute density, centrality, ...\n- manipulation: extract network centered to the most connected node\n- you are free to find fun things to do (with networks...)\n\n# Analysis of the French political Blogs in 2006\n\nLoad the data set and upgrade to the current version of **igraph** \n```{r}\nblogosphere2006 <- upgrade_graph(fblog)\n```\n\n## Descriptive statistics\n\nExplore the standard descriptives statistics for vertices, edges and network: density, transitivity, diameter, degree distribution, centrality, hubs, shortest paths and distances, cliques, triplets and so on.\n\nAmend your network (via attributes) and give some vizualizations if relevent. Make comments: each plot must support some interesting facts about the data.\n\n## Graph Partionning\n\nIt is now time to find some more subtle structure in the network by performing graph clustering of the nodes. A commonly seeked structure in networks is the presence of _communities_, taht is, nodes that shares similar connectivy patterns, like clusters of friends in social networks.\n\nThe two methods explored today for community detection do not assume any underlying model on the graph. The first one is based on a generalization of hierarchical clustering for graphs using the concept of\n_modularity_ to define an appropriate dissimilarity measure between clusters. The second is the normalized spectral clustering.\n\n### Hierarchical clustering with modularity\n\nJust like in usual hierarchical clustering, we need some cost function to choose which clusters are fused during construction of the hierarchy. Let $\\mathcal{C} = \\{C_1,\\dots,C_K\\}$ be a candidate partition and define $f_{ij}(\\mathcal{C})$ to be the fraction of edges in the original network that connect vertices in $C_i$ with vertices in $C_j$. The modularity of $\\mathcal{C}$ is the value\n\\begin{equation*}\n  \\mathrm{modularity}(\\mathcal{C}) = \\sum_{k=1}^K \\left(f_{kk}(\\mathcal{C}) - f_{kk}^\\star\\right)^2\n\\end{equation*}\nwhere $f_{kk}^\\star$  is the expected value of $f_{kk}$ under some model of random edge assignment. The `igraph::fastgreedy.community` function performs and approximated optimization of the modularity measure.\n\nUse this function to extract a possible clustering of the nodes for the French blogosophere. Use the plot function for object with class `communities` outputting from `igraph::fastgreedy.community`. Compare this clustering with the political labels of the nodes (use for instance confusion tables with `table` or adjusted Rand-Index with `aricode::ARI`).\n\n### Spectral Analysis\n\nHere is a reminder of the spectral clustering algorithm presented during course.\n\n\\begin{algorithm}[H]\n  \\KwIn{Adjacency matrix and number of classes $Q$}\n  \\BlankLine\\BlankLine\n  \\DontPrintSemicolon\n  \n  Compute the normalized graph Laplacian $\\mathbf{L}$\\;\n  Compute the eigen vectors of $\\mathbf{L}$ associated with the $Q$ smallest eigenvalues\\;\n  Define $\\mathbf{U}$,  the $p\\times Q$ matrix  that encompasses these $Q$ vectors \\;\n  Define $\\tilde{\\mathbf{U}}$, the row-wise normalized version of $\\mathbf{U}$: $ \\tilde{u}_{ij} = \\frac{u_{ij}}{\\| \\mathbf{U}_i\\|_2}$\\;\n  Apply k-means to $(\\tilde{\\mathbf{U}}_i)_{i=1,\\dots,p}$\n\n  \\BlankLine\\BlankLine\n  \\KwOut{vector of classes $\\mathbf{C}\\in \\mathcal{Q}^p$, such as  $C_i = q$ if $i\\in q$}\n\n  \\caption{Spectral Clustering by Ng, Jordan and Weiss (2002)}\n\\end{algorithm}\n\n1. Compute the graph Laplacian (normalized of unormalized) by hands or with the `igraph::graph.laplacian` function.\n2. Compute its eigen values and represent the scree plot (eigen values by increasing order). Comment.\n3. Compute its eigen vectors and represent the pairs plot between the first 10 eigen vectors with non-null eigen values. Add colors associated to the Political labels of the nodes.  Comment.\n4. Implement the Spectral clustering algorithm and apply it to the French Blogosphere for various numbers of clusters. \n5. Compare your clustering to the political labels and to the one obtained by hierarchical clustering. Comment, make plots changing node colors, etc.\n6. Redo the analysis with the absolute spectral clustering of Rohe et al (2011).\n\n**Remark:** As another fancy alternative or complement to the **igraph** package, you may use the `Matrix::image` method on the adjacency matrix of a graph once rows and columns reordered according to the clustering to represent the clustered network.\n",
    "created" : 1507285453382.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1459046336",
    "id" : "417DB676",
    "lastKnownWriteTime" : 1507303784,
    "last_content_update" : 1507303784646,
    "path" : "~/Dropbox/teachings_2017/graphesENSAI/practicals/1_descriptiveAnalysis/1_descriptiveAnalysis.Rmd",
    "project_path" : "1_descriptiveAnalysis/1_descriptiveAnalysis.Rmd",
    "properties" : {
        "last_setup_crc32" : "BBA44CDAbb338d19",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}